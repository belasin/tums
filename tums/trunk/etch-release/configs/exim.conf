######################################################################
#                  Runtime configuration file for Exim               #
######################################################################

######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################

ldap_default_servers = 127.0.0.1

primary_hostname = bpexample.hostname.bpexample.com

domainlist local_domains = @ : lsearch;/etc/exim/local_domains
domainlist relay_to_domains = lsearch;/etc/exim/relay_domains
hostlist   relay_from_hosts = 127.0.0.1 : 192.168.0.0/24

domainlist rbl_domain_whitelist = lsearch;/etc/exim/rbl_domain_whitelist
hostlist rbl_ip_whitelist = net-iplsearch;/etc/exim/rbl_ip_whitelist
addresslist rbl_sender_whitelist = lsearch*@;/etc/exim/rbl_sender_whitelist

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = check_message

av_scanner = clamd:/var/run/clamav/clamd.sock
spamd_address = 127.0.0.1 783

qualify_domain = bpexample.com
# qualify_recipient =
# never_users = root
trusted_users = mail

helo_allow_chars = _
host_lookup = *
smtp_enforce_sync = false
helo_accept_junk_hosts = *
strip_excess_angle_brackets
strip_trailing_dot

# Honour precedence header
delay_warning_condition = "\
        ${if match{$h_precedence:}{(?i)bulk|list|junk}{no}{yes}}"

rfc1413_hosts = *
rfc1413_query_timeout = 60s

sender_unqualified_hosts = 192.168.0.0/24
recipient_unqualified_hosts = 192.168.0.0/24

ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d

# queue_domains = ! bpexample.com : ! localhost

# SSL/TLS cert and key
tls_certificate = /etc/exim/exim.cert
tls_privatekey = /etc/exim/exim.key

# Advertise TLS to anyone
tls_advertise_hosts = *

smtp_etrn_command = /etc/exim/etrn_script $domain
acl_smtp_etrn = acl_check_etrn

######################################################################
#                       ACL CONFIGURATION                            #
#         Specifies access control lists for incoming SMTP mail      #
######################################################################

begin acl

check_message:

#   require verify = header_syntax

   # If your host is listed in this file then no checks will be done against
   # your email

   accept condition = ${lookup{$sender_host_address}lsearch{/etc/exim/host_noscan_from}{1}{0}}

   # Check for viruses, except if your host is listed in the file.

   deny message = This message contains a virus ($malware_name)
        condition = ${lookup{$sender_host_address}lsearch{/etc/exim/host_av_noscan_from}{0}{1}}
   	demime = *
   	malware = *

   # Check for badly formatted MIME, except if your host is listed in the file.

   deny message = This message contains a broken MIME container ($demime_reason).
   	condition=${if >{$demime_errorlevel}{2}{1}{0}}
   	condition=${lookup{$sender_host_address}lsearch{/etc/exim/host_demime_noscan_from}{0}{1}}
   	demime = *

   # Check for blacklisted extension types, except if your host is listed in
   # the file.

#   deny message = This message contains a file with a blacklisted extension (${uc:$found_extension}).
#  	condition=${lookup{$sender_host_address}lsearch{/etc/exim/host_extension_noscan_from}{0}{1}}
#   	demime = vbs:com:pif:lnk:exe

  # Always add X-Spam-Score and X-Spam-Report headers, using SA system-wide settings
  # (user "nobody"), no matter if over threshold or not.

  warn  message = X-Spam-Score: $spam_score ($spam_bar)
	condition = ${if <{$message_size}{80k}{1}{0}}
        spam = nobody:true

  warn  message = X-Spam-Report: $spam_report
	condition = ${if <{$message_size}{80k}{1}{0}}
        spam = nobody:true

  # Add X-Spam-Flag if spam is over system-wide threshold
  warn message = X-Spam-Flag: YES
	condition = ${if <{$message_size}{80k}{1}{0}}
        spam = nobody

  # Reject spam messages with score over 7, using an extra condition.
  deny  message = This message scored $spam_score spam points and is considered to be unsolicited. Rejected.
	condition = ${if <{$message_size}{80k}{1}{0}}
        spam = nobody:true
        condition = ${if >{$spam_score_int}{70}{1}{0}}

accept

# This access control list is used for every RCPT command in an incoming
# SMTP message. The tests are run in order until the address is either
# accepted or denied.

acl_check_rcpt:

  # Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
  # testing for an empty sending host field.

  accept  hosts = :

  # Deny if the local part contains @ or % or / or | or !. These are rarely
  # found in genuine local parts, but are often tried by people looking to
  # circumvent relaying restrictions.

  deny    local_parts   = ^.*[@%!/|]

  # Accept mail to postmaster in any local domain, regardless of the source,
  # and without verifying the sender.

  accept  local_parts   = postmaster
          domains       = +local_domains

  # Deny unless the sender address can be verified.

  require verify        = sender

  #############################################################################
  # There are no checks on DNS "black" lists because the domains that contain
  # these lists are changing all the time. However, here are two examples of
  # how you could get Exim to perform a DNS black list lookup at this point.
  # The first one denies, while the second just warns.
  #
  # deny    message       = rejected because $sender_host_address is in a black list at $dnslist_domain\n$dnslist_text
  #         dnslists      = black.list.example
  #
  # warn    message       = X-Warning: $sender_host_address is in a black list at $dnslist_domain
  #         log_message   = found in $dnslist_domain
  #         dnslists      = black.list.example
  #############################################################################
deny message = rejected because $sender_host_address is in a blacklist at $dnslist_domain\n$dnslist_text
     !authenticated = *
     # RBL Bypass Local Domain List
     !domains = +rbl_domain_whitelist
     # RBL Whitelist Incoming hosts
     !hosts = +rbl_ip_whitelist
     # RBL Bypass Sender Domain List
     !senders = +rbl_sender_whitelist
     dnslists = sbl-xbl.spamhaus.org : \
     list.dsbl.org : \
     web.dnsbl.sorbs.net : \
     zombie.dnsbl.sorbs.net : \
     nomail.rhsbl.sorbs.net : \
     combined.njabl.org



  # Accept if the address is in a local domain, but only if the recipient can
  # be verified. Otherwise deny. The "endpass" line is the border between
  # passing on to the next ACL statement (if tests above it fail) or denying
  # access (if tests below it fail).

  accept  domains       = +local_domains
          endpass
          message       = unknown user
          verify        = recipient

  # Accept if the address is in a domain for which we are relaying, but again,
  # only if the recipient can be verified.

  accept  domains       = +relay_to_domains
          endpass
          message       = unrouteable address
          verify        = recipient

  accept  hosts         = +relay_from_hosts
  accept  authenticated = *

  deny    message       = relay not permitted

acl_check_etrn:

 accept hosts = 0.0.0.0/0


######################################################################
#                      ROUTERS CONFIGURATION                         #
#               Specifies how addresses are handled                  #
######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers

# If any message has already been delivered to the bsmtp file,
# this will detect the existence of the file and all messages will
# go there, regardless of age.
etrn_already:
 driver = accept
 transport = bsmtp_for_etrn
 require_files = /var/spool/mail/etrn/$domain
 domains = lsearch;/etc/exim/etrn_domains

# If a message has been on the queue for over the specified amount of
# time, this will catch it and drop it into the bsmtp file
etrn_delay:
 driver = accept
 transport = bsmtp_for_etrn
 condition = ${if >{$message_age}{1800} {yes}{no}}
 domains = lsearch;/etc/exim/etrn_domains

## Hylafax router
#fax:
#  driver = manualroute
#  domains = ! +local_domains
#  route_list = *.fax
#  transport = fax

hubbed_hosts:
  driver = manualroute
  domains = ! +local_domains
  route_data = ${lookup{$domain}lsearch{/etc/exim/hubbed_hosts}}
  transport = remote_smtp

# Useful to deliver mail to other mail servers listed first

gateway:
  driver = manualroute
  domains = ! +local_domains
  route_list = * bpexample.smtprelay bydns
  transport = remote_smtp

#dnslookup:
#  driver = dnslookup
#  domains = ! +local_domains
#  transport = remote_smtp
#  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
#  no_more

#faxuser:
#  driver = accept
#  check_local_user
##  transport = fax_delivery
#  transport = procmail_pipe


userforward:
 driver = redirect
 file = /var/spool/mail/forward/${local_part}@${domain}
 no_verify
 no_expn
 check_ancestor
 file_transport = address_file
 pipe_transport = address_pipe
 reply_transport = address_reply

user_vacation:
 driver = accept
 require_files = /var/spool/mail/vacation/${local_part}@${domain}.txt
 no_verify
 user = apache
 senders = !^.*-request@.* : !^owner-.*@.* : !^postmaster@.* : \
            ! ^listmaster@.* : !^mailer-daemon@.*
 transport = vacation_reply
 unseen

ldap_aliases:
  driver = redirect
  allow_defer
  allow_fail
  data = ${lookup ldap {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
	 ldap:///?mail?sub?(mailAlternateAddress=${local_part}@${domain})}}
  redirect_router = ldap_forward
  retry_use_local_part

ldap_forward:
  driver = redirect
  allow_defer
  allow_fail
  data = ${lookup ldap {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
	 ldap:///?mailForwardingAddress?sub?\
         (&(accountStatus=active)(mail=${local_part}@${domain}))}{$value}fail}
  no_expn
  retry_use_local_part
  no_verify

ldap_user:
  driver = accept
  condition = 	${if eq {}{${lookup ldap {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
		ldap:///?mail?sub?(&(accountStatus=active)(mail=${local_part}@${domain}))}}}{no}{yes}}
  group = users
  retry_use_local_part
  transport = local_delivery

localuser:
  driver = accept
  check_local_user
  transport = local_delivery

######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

begin transports

bsmtp_for_etrn:
 driver=appendfile
 file=/var/spool/mail/etrn/$domain
 user=mail
 batch_max=1000
 use_bsmtp

vacation_reply:
 debug_print = "T: vacation_reply for $local_part@$domain"
 driver = autoreply
 file = /var/spool/mail/vacation/${local_part}@${domain}.txt
 file_expand
 log = /var/spool/mail/vacation/${local_part}@${domain}.log
 once_repeat = 7d
 once = /var/spool/mail/vacation/${local_part}@${domain}.db
 from = postmaster@${domain}
 to = $sender_address
 subject = "Re: $h_subject"
 text = "\
 Dear $h_from:\n\n\
 This is an automatic reply. Feel free to send additional\n\
 mail, as only this one notice will be generated. The following\n\
 is a prerecorded message, sent for $local_part@${domain}:\n\
 ====================================================\n\n\
 "

#fax:
#  driver = pipe
#  command = "/usr/bin/faxmail -d ${local_part}@${extract{1}{.}{$domain}}"
#  home_directory = /usr/bin
#  user = fax

#procmail_pipe:
#  driver = pipe
#  command = "/usr/bin/procmail -d -m relayfax@ws.co.za"
##  delivery_date_add
##  envelope_to_add
#  no_freeze_exec_fail
#  user  = relayfax
#  group = users
##  no_log_defer_output
##  no_log_fail_output
##  no_log_output
##  no_return_fail_output
##  no_return_output
#  return_path_add
#  umask = 022

remote_smtp:
  driver = smtp

local_delivery:
  driver = appendfile
  create_directory
  delivery_date_add
#  directory = /var/spool/mail/${local_part}@${domain}
  directory = ${lookup ldap {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
	      ldap:///?mailMessageStore?sub?(&(accountStatus=active)\
	      (mail=${local_part}@${domain}))}}
  directory_mode = 770
  envelope_to_add
  group = mail
  maildir_format
  mode = 660
  return_path_add
  user = mail

#fax_delivery:
#  driver = appendfile
#  file = /var/spool/mail/relayfax
#  group = users
#  return_path_add
#  mode = 660
#  user = relayfax

# This transport is used for handling pipe deliveries generated by alias or
# .forward files. If the pipe generates any standard output, it is returned
# to the sender of the message as a delivery error. Set return_fail_output
# instead of return_output if you want this to happen only when the pipe fails
# to complete normally. You can set different transports for aliases and
# forwards if you want to - see the references to address_pipe in the routers
# section above.

address_pipe:
  driver = pipe
  return_output


# This transport is used for handling deliveries directly to files that are
# generated by aliasing or forwarding.

address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add


# This transport is used for handling autoreplies generated by the filtering
# option of the userforward router.

address_reply:
  driver = autoreply



######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# Domain               Error       Retries
# ------               -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h
#*                      *           F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite

# *@*.bpexample.com    $1@bpexample.com

######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

# There are no authenticator specifications in this default configuration file.

begin authenticators

login:
    driver = plaintext
    public_name = LOGIN
    server_prompts = "Username:: : Password::"
    server_advertise_condition = yes
    server_condition = \
        ${\
        lookup ldap { \
        user="${lookup ldapdn {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
        ldap:///?dn?sub?(&(accountStatus=active)(mail=${quote_ldap:$1}))}}" \
        pass="$2" \
        ldap:///?mail?sub?(&(accountStatus=active)(mail=${quote_ldap:$1})) \
        }{yes}fail \
        }
    server_set_id = $1

plain:
    driver = plaintext
    public_name = PLAIN
    server_prompts = :
    server_advertise_condition = yes
    server_condition = \
        ${\
        lookup ldap { \
        user="${lookup ldapdn {user="cn=Manager,o=BPEXAMPLE" pass=wsbpexample \
        ldap:///?dn?sub?(&(accountStatus=active)(mail=${quote_ldap:$2}))}}" \
        pass="$3" \
        ldap:///?mail?sub?(&(accountStatus=active)(mail=${quote_ldap:$2})) \
        }{yes}fail \
        }
    server_set_id = $2

# End of Exim configuration file
