import config, os
from Core import Utils


class Plugin(object):
    parameterHook = "--exim"
    parameterDescription = "Reconfigure exim"
    parameterArgs = ""
    autoRun = True
    configFiles = [ 
        "/etc/exim/exim.conf",
        "/etc/exim/local_domains",
        "/etc/exim/relay_domains",
        "/etc/exim/hubbed_hosts",
    ]

    def __init__(self):
        if os.path.exists('/etc/exim4'):
            self.configFiles = [
                "/etc/exim4/exim.conf",
                "/etc/exim4/local_domains",
                "/etc/exim4/relay_domains",
                "/etc/exim4/hubbed_hosts"
            ]

    def reloadServices(self):
        os.system('/etc/init.d/exim restart')

    def MailMan(self):
        if config.Mail.get('mailman'):
            mm_router = [
                "        mailman_router:",
                " domains = +local_domains",
                " driver = accept",
                " require_files = MAILMAN_HOME/lists/$local_part/config.pck",
                " local_part_suffix_optional",
                " local_part_suffix = -bounces : -bounces+* : \\",
                " -confirm+* : -join : -leave : \\",
                " -owner : -request : -admin",
                " transport = mailman_transport\n\n"
            ]
            mm_transport = [
                "        mailman_transport:",
                " driver = pipe",
                " command = MAILMAN_WRAP \\",
                " '${if def:local_part_suffix \\",
                " {${sg{$local_part_suffix}{-(\\\\w+)(\\\\+.*)?}{\$1}}} \\",
                " {post}}' \\",
                " $local_part",
                " current_directory = MAILMAN_HOME",
                " home_directory = MAILMAN_HOME",
                " user = MAILMAN_USER",
                " group = MAILMAN_GROUP\n\n"
            ]
            mm_main = [
                "        MAILMAN_HOME=/var/lib/mailman",
                "MAILMAN_WRAP=MAILMAN_HOME/mail/mailman",
                "MAILMAN_USER=list",
                "MAILMAN_GROUP=list\n"
            ]
            
            return (
                '\n        '.join(mm_router),
                '\n        '.join(mm_transport),
                '\n        '.join(mm_main)
            )
        else:
            return ('','','')

    def Greylisting(self):
        if config.Mail.get('greylisting', True):
            aclCheckSenderGreylist = [
                "        # Defer if greylisted",
                "  defer message     = $sender_host_address is not yet authorized to deliver \\",
                "                      mail from <$sender_address> to <$local_part@$domain>. \\",
                "                      Please try later.",
                "    log_message     = greylisted.",
                "    !senders        = :",
                "    !hosts          = ${if exists {/etc/greylistd/whitelist-hosts}\\",
                "                                  {/etc/greylistd/whitelist-hosts}{}} : \\",
                "                      ${if exists {/var/lib/greylistd/whitelist-hosts}\\",
                "                                  {/var/lib/greylistd/whitelist-hosts}{}} : +relay_hosts",
                "    domains         = +local_domains : +relay_domains",
                "    verify          = recipient/callout=20s,use_sender,defer_ok",
                "    condition       = ${readsocket{/var/run/greylistd/socket}\\",
                "                       {--grey \\",
                "                       $sender_host_address \\",
                "                       $sender_address \\",
                "                       $local_part@$domain}\\",
                "                       {5s}{}{false}}",
                "# Deny if blacklisted by greylistd",
                " deny message       = $sender_host_address is blacklisted from delivering \\",
                "                      mail from <$sender_address> to <$local_part@$domain>.",
                "    log_message     = blacklisted.",
                "    !senders        = :",
                "    verify          = recipient/callout=20s,use_sender,defer_ok",
                "    condition       = ${readsocket{/var/run/greylistd/socket}\\",
                "                       {--black \\",
                "                       $sender_host_address \\",
                "                       $sender_address \\",
                "                       $local_part@$domain}\\",
                "                       {5s}{}{false}}\n"
            ]

            aclCheckDataGreylist = [
                "        # Defer if greylisted",
                " defer message     = $sender_host_address is not yet authorized to deliver \\",
                "                      mail from <$sender_address> to <$recipients>. \\",
                "                      Please try later.",
                "    log_message    = greylisted.",
                "    senders        = :",
                "    !hosts         = ${if exists {/etc/greylistd/whitelist-hosts}\\",
                "                                 {/etc/greylistd/whitelist-hosts}{}} : \\",
                "                     ${if exists {/var/lib/greylistd/whitelist-hosts}\\",
                "                                 {/var/lib/greylistd/whitelist-hosts}{}} : +relay_hosts",
                "    !authenticated = *",
                "    condition      = ${readsocket{/var/run/greylistd/socket}\\",
                "                      {--grey \\",
                "                      $sender_host_address \\",
                "                      $recipients}\\",
                "                      {5s}{}{false}}",
                "# Deny if blacklisted by greylist",
                " deny message      = $sender_host_address is blacklisted from delivering \\",
                "                     mail from <$sender_address> to <$recipients>.",
                "    log_message    = blacklisted.",
                "    !senders       = :",
                "    !authenticated = *",
                "    condition      = ${readsocket{/var/run/greylistd/socket}\\",
                "                      {--black \\",
                "                      $sender_host_address \\",
                "                      $recipients}\\",
                "                      {5s}{}{false}}\n"
            ]

            return ('\n        '.join(aclCheckSenderGreylist), '\n        '.join(aclCheckDataGreylist))
        else:
            return ('', '')

    def writeConfig(self, *a):
        # XXX
        # VERY IMPORTANT NOTICE! 
        #
        #  All lines are lead by 8 spaces. These spaces are stripped out at the end.
        #  If you have less than 8 spaces before any new line written to the config
        #  then it will be broken
        #  This is done to make the source semi readable 
        # 
        # END OF IMPORTANT NOTICE
        if os.path.exists('/etc/debian_version'):
            debianPath = True
        else:
            debianPath = False

        locals = "\n".join(config.LocalDomains)

        relayDoms = config.Mail.get('relay', [])
        hubs = ""
        mailReroute = ""
        for dom, dest in config.Mail.get('hubbed', []):
            if "@" in dom:
                mailReroute += "%s       %s        byname\n" % (dom,dest)
                dom = dom.split('@')[-1]
            else:
                hubs += "%s        %s        byname\n" % (dom, dest)

            if dom not in relayDoms:
                relayDoms.append(dom)

        relays = "\n".join(relayDoms)

        blacklistSender = ""
        blacklistHost = ""
        blacklistDom  = ""
        
        for b in config.Mail.get('blacklist', []):
            if "@" in b:
                blacklistSender += b + '\n'
            else:
                try:
                    int(b.split('.')[0])
                    blacklistHost += b + '\n'
                except:
                    blacklistDom += b + '\n'

        whitelistSender = ""
        whitelistHost = ""
        whitelistDom = ""
        for w in config.Mail.get('whitelist', []):
            if "@" in w:
                whitelistSender += w + "\n"
            else:
                try:
                    int(w.split('.')[0])
                    whitelistHost += w + '\n'
                except:
                    whitelistDom += w + '\n'

        catchall = ""
        for c in config.Mail.get('catchall', []):
            catchall += c + "\n"

        # System filters
        copyTo = "#System Filter\nif error_message then finish endif\n\n"

        if config.Mail.get('copytoall', None):
            copyTo += "if first_delivery then\n"
            copyTo += "    unseen deliver %s errors_to postmaster@%s\n" % (config.Mail['copytoall'], config.Domain)
            copyTo += "endif\n\n"

        for addr, dest in config.Mail.get('copys', []):
            copyTo += "if $recipients contains %s then\n" % addr
            copyTo += "    unseen deliver %s errors_to postmaster@%s\n" % (dest, config.Domain)
            copyTo += "endif\n\n"

        if debianPath:
            Utils.writeConf('/etc/exim4/sender_whitelist', whitelistSender, '#')
            Utils.writeConf('/etc/exim4/host_whitelist', whitelistHost, '#')
            Utils.writeConf('/etc/exim4/domain_whitelist', whitelistDom, '#')

            Utils.writeConf('/etc/exim4/sender_blacklist', blacklistSender, '#')
            Utils.writeConf('/etc/exim4/host_blacklist', blacklistHost, '#')
            Utils.writeConf('/etc/exim4/domain_blacklist', blacklistDom, '#')

            Utils.writeConf('/etc/exim4/host_noavscan', "", '#')

            Utils.writeConf('/etc/exim4/local_domains', locals, '#')
            Utils.writeConf('/etc/exim4/relay_domains', relays, '#')
            Utils.writeConf('/etc/exim4/hubbed_hosts', hubs, '#')
            Utils.writeConf('/etc/exim4/mail_reroute', mailReroute, '#')
            Utils.writeConf('/etc/exim4/system_filter', copyTo, '#')
            Utils.writeConf('/etc/exim4/catchall_domains', catchall, '#')
            # Get rid of the autogenerated tag so aptitude doesn't break us
            os.system('rm /var/lib/exim4/config.autogenerated > /dev/null 2>&1')
            systemFilter = "system_filter = /etc/exim4/system_filter\n"
        else:
            Utils.writeConf('/etc/exim/sender_whitelist', whitelistSender, '#')
            Utils.writeConf('/etc/exim/host_whitelist', whitelistHost, '#')
            Utils.writeConf('/etc/exim/domain_whitelist', whitelistDom, '#')

            Utils.writeConf('/etc/exim/sender_blacklist', blacklistSender, '#')
            Utils.writeConf('/etc/exim/host_blacklist', blacklistHost, '#')
            Utils.writeConf('/etc/exim/domain_blacklist', blacklistDom, '#')

            Utils.writeConf('/etc/exim/host_noavscan', "", '#')

            Utils.writeConf('/etc/exim/local_domains', locals, '#')
            Utils.writeConf('/etc/exim/relay_domains', relays, '#')
            Utils.writeConf('/etc/exim/hubbed_hosts', hubs, '#')
            Utils.writeConf('/etc/exim/mail_reroute', mailReroute, '#')
            Utils.writeConf('/etc/exim/system_filter', copyTo, '#')
            Utils.writeConf('/etc/exim/catchall_domains', catchall, '#')
            systemFilter = "system_filter = /etc/exim/system_filter\n"
 
        primaryDomain = config.Domain
        hostname = config.ExternalName  # Must be externally lookupable(?!?) name
        mailSize = config.Mail.get('mailsize', '')
        localNet = config.EthernetDevices[config.LANPrimary].get('network', '')
        if not localNet: #somehow it isn't set ??
            # use the ip...
            ip = config.EthernetDevices[config.LANPrimary].get('ip', '')
            if not ip:
                # Now we have no idea... There is no IP or network set for the LANPrimary
                # so we will not assume anything
                localNet = ""
            else:
                cidr = ip.split('/')[-1]
                host = '.'.join(ip.split('.')[:3])
                net = '%s.0/%s' % (host, cidr)
                # For CIDR's which are not a whole class A, B or C this method is broken...
                localNet = ip

        # Accept mail on our IPv6 prefix
        if config.EthernetDevices[config.LANPrimary].get('ipv6', False):
            localNet += ' : %s ' % config.EthernetDevices[config.LANPrimary]['ipv6'].replace(':', '::')

        # fill in allowed hosts (config.Mail.relay-from)
        if config.Mail.get('relay-from'):
            localNet += ' : ' + ' : '.join(config.Mail['relay-from'])
        extensionBlock = ""

        # Blocked file extensions
        if config.Mail.get('blockedfiles', []):
            extensionBlock = "            deny  message     = We do not accept \".$found_extension\" attachments here.\n"
            extensionBlock += "                 demime      = %s\n" % ':'.join(config.Mail['blockedfiles'])

        # Get any mailman settings
        mm_router, mm_transport, mm_main = self.MailMan()

        # SpamAssassin required score
        spamscore = config.Mail.get('spamscore', 70)

        # Get greylisting ACLS (if greylisting is enabled)
        aclCheckSenderGreylist, aclCheckDataGreylist = self.Greylisting()

        ### Enable tweaked performance
        performanceTweak = ""
        if config.Mail.get('performance', False):
            performanceTweak =  "        # use muliple directories (default false)\n"
            performanceTweak += "        split_spool_directory\n"
            performanceTweak += "        # queue incoming if load high (no default)\n"
            performanceTweak += "        queue_only_load = 4\n"
            performanceTweak += "        # maximum simultaneous queue runners (default 5)\n"
            performanceTweak += "        queue_run_max = 0\n"
            performanceTweak += "        # parallel delivery of one message to a number of remote hosts (default 2)\n"
            performanceTweak += "        remote_max_parallel = 30\n"
            performanceTweak += "        # simultaneous connections from a single host (default 10)\n"
            performanceTweak += "        smtp_accept_max_per_connection = 20\n"
            performanceTweak += "        # maximum number of waiting SMTP connections (default 20)\n"
            performanceTweak += "        smtp_connect_backlog = 50\n"
            performanceTweak += "        # maximum number of simultaneous incoming SMTP calls that Exim will accept (default 20)\n"
            performanceTweak += "        smtp_accept_max = 0\n"

        RBL = [
            "dsn.rfc-ignorant.org/$sender_address_domain",
            "zen.spamhaus.org",
            "list.dsbl.org",
            "multihop.dsbl.org",
            "dnsbl.njabl.org",
            "bhnc.njabl.org",
            "combined.njabl.org",
            "dnsbl-1.uceprotect.net",
            "bl.spamcop.net",
            "psbl-mirror.surriel.com",
            "blackholes.mail-abuse.org",
            "dialup.mail-abuse.org"
        ]

        ### Exim main configuration

        eximMain = """
        ######################################################################
        #                    MAIN CONFIGURATION SETTINGS                     #
        ######################################################################
        ldap_default_servers = %(ldap)s
        primary_hostname = %(hostname)s
        av_scanner = clamd:/var/run/clamav/clamd.sock 
        spamd_address = 127.0.0.1 783
        %(systemFilter)s

        domainlist local_domains = @ : lsearch;/etc/exim4/local_domains
        domainlist relay_domains = lsearch;/etc/exim4/relay_domains
        hostlist   relay_hosts = 127.0.0.1 : %(hostlist)s

        domainlist acl_domain_whitelist = lsearch;/etc/exim4/domain_whitelist
        hostlist acl_host_whitelist = net-iplsearch;/etc/exim4/host_whitelist
        addresslist acl_sender_whitelist = lsearch*@;/etc/exim4/sender_whitelist
        domainlist acl_domain_blacklist = lsearch;/etc/exim4/domain_blacklist
        hostlist acl_host_blacklist = net-iplsearch;/etc/exim4/host_blacklist
        addresslist acl_sender_blacklist = lsearch*@;/etc/exim4/sender_blacklist

        hostlist acl_host_noavscan = net-iplsearch;/etc/exim4/host_noavscan

        acl_smtp_connect = acl_check_host
        acl_smtp_helo = acl_check_helo
        acl_smtp_mail = acl_check_sender
        acl_smtp_rcpt = acl_check_rcpt
        acl_smtp_data = acl_check_data
        acl_smtp_etrn = acl_check_etrn

        qualify_domain = %(domain)s
        trusted_users = mail
        message_size_limit = %(mailSize)s
        helo_allow_chars = _
        host_lookup = *
        smtp_enforce_sync = false 
        helo_accept_junk_hosts = *
        strip_excess_angle_brackets
        strip_trailing_dot
        delay_warning_condition = "\\
                ${if match{$h_precedence:}{(?i)bulk|list|junk}{no}{yes}}"
        rfc1413_hosts = ${if eq{$interface_port}{SMTP_PORT} {*}{! *}}
        rfc1413_query_timeout = 30s
        sender_unqualified_hosts = %(hostlist)s
        recipient_unqualified_hosts = %(hostlist)s
        ignore_bounce_errors_after = 2d
        timeout_frozen_after = 7d
        # SSL/TLS cert and key
        tls_certificate = /etc/exim4/exim.cert
        tls_privatekey = /etc/exim4/exim.key
        # Advertise TLS to anyone
        tls_advertise_hosts = *
        smtp_etrn_command = /etc/exim4/etrn_script $domain

%(extra)s
        """ % {
            'ldap':         '127.0.0.1',
            'hostname':     hostname,
            'hostlist':     localNet,
            'domain':       primaryDomain,
            'mailSize':     mailSize,
            'extra':        performanceTweak + mm_main,
            'systemFilter': systemFilter
        }

        eximACL="""
        ######################################################################
        #                       ACL CONFIGURATION                            #
        #         Specifies access control lists for incoming SMTP mail      #
        ######################################################################

        begin acl

        ######################################################################
        # Check connecting host (DNSBL's checked in acl_check_rcpt to ensure no reconnect attempt)
        ######################################################################
        acl_check_host:
            deny hosts        = +acl_host_blacklist
            accept

        ######################################################################
        # Check conencting host is not pretending to be the localhost
        ######################################################################
        acl_check_helo:

            accept hosts         = +relay_hosts
        # If the HELO pretend to be this host
            deny condition       = ${if or { \\
                                  {eq {${lc:$sender_helo_name}}{%(hostname)s}} \\
                                  {eq {${lc:$sender_helo_name}}{%(domain)s}} \\
                                  } {true}{false} }
            accept


        ######################################################################
        # Check sender address
        ######################################################################
        acl_check_sender:
            deny message      = sender envelope address $sender_address is locally blacklisted here.
                senders         = +acl_sender_blacklist
            accept


        ######################################################################
        # Check incoming messages
        ######################################################################
        acl_check_rcpt:

        # Accept if source is local SMTP
          accept hosts      = :
        # Deny if illegal characters in email address
          deny local_parts  = ^.*[@%%!/|] : ^\\\\.

        # Accept mail to postmaster at any local domain without any checks
          accept local_parts = postmaster
                 domains    = +local_domains

        # Accept local, authenticated, whitelisted and dnswl'd hosts
          accept hosts      = +relay_hosts
          accept authenticated = *
          accept dnslists   = list.dnswl.org
          accept hosts      = +acl_host_whitelist

        # Deny if listed in a DNSBL
          deny message      = rejected because $sender_host_address is in a blacklist \\
                              at $dnslist_domain\\n$dnslist_text
            !senders        = :
            domains         = +local_domains : +relay_domains
            dnslists        = %(rbl)s

        # Deny unless the sender address can be verified.
          require verify    = sender

        # Accept if this is a local domain
          accept domains    = +local_domains
            endpass
            message         = unknown user
            verify          = recipient

        # Accept if this is a relay domain
          accept domains    = +relay_domains
            endpass
            message         = unrouteable address
            verify          = recipient

%(senderGreylist)s

        # Deny everything else
            deny message    = relay not permitted

        ######################################################################
        # Check contents of email
        ######################################################################
        acl_check_data:
%(dataGreylist)s
        # SpamAssassin Content Filtering
            accept condition  = ${if >={$message_size}{80k}{yes}{no}}
            deny message      = This message contains a virus ($malware_name)
                !hosts        = +acl_host_noavscan
                malware       = *

            deny message      = This message contains a broken MIME container ($demime_reason).
                !hosts        = +acl_host_noavscan
                condition     = ${if >{$demime_errorlevel}{2}{1}{0}}
                demime        = *

        # Include Spam Score in Header
            warn message      = X-Spam-Score: $spam_score ($spam_bar)
                spam          = nobody:true

        # Include Spam Report in Header
            warn message      = X-Spam-Report: $spam_report
                spam          = nobody:true

        # Add X-Spam-Flag if spam is over system-wide threshold
            warn message      = X-Spam-Flag: YES
                condition     = ${if >{$spam_score_int}{%(spamlow)s}{true}{false}}
                spam          = nobody:true

        # Reject spam messages with score over 7, using an extra condition.
            deny message      = This message scored $spam_score spam points and is considered to be unsolicited. Rejected.
                !hosts        = +acl_host_noavscan
                spam          = nobody:true
                condition     = ${if >{$spam_score_int}{%(spamhigh)s}{true}{false}}

%(extblock)s

            accept

        ######################################################################
        # Check ETRN requests
        ######################################################################
        acl_check_etrn:
            accept hosts = 0.0.0.0/0

        """ % {
            'rbl':              ' : '.join(RBL),        # DNS block lists
            'spamlow':          int(spamscore)-20,      # Warn spam score
            'spamhigh':         int(spamscore),         # Drop spam score.
            'senderGreylist':   aclCheckSenderGreylist, # Greylisting configuration
            'dataGreylist':     aclCheckDataGreylist,   #
            'extblock':         extensionBlock,         # Blocked file extensions
            'hostname':         hostname,
            'domain':       primaryDomain,
        }

        # Set the external router depending on how the relay is set
        if config.SMTPRelay:
            externalRouter = """
        gateway:
            driver = manualroute
            domains = ! +local_domains
            route_list = * %s bydns
            transport = remote_smtp
            """ % config.SMTPRelay
        else:
            externalRouter = """
        dnslookup:
            driver = dnslookup
            domains = ! +local_domains
            transport = remote_smtp
            ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
            no_more
            """

        eximRouters = """
        ######################################################################
        #                      ROUTERS CONFIGURATION                         #
        ######################################################################

        begin routers

%(router)s
        etrn_already:
            driver = accept
            transport = bsmtp_for_etrn
            require_files = /var/spool/mail/etrn/$domain
            domains = lsearch;/etc/exim/etrn_domains

        etrn_delay:
            driver = accept
            transport = bsmtp_for_etrn
            condition = ${if >{$message_age}{1800} {yes}{no}}
            domains = lsearch;/etc/exim/etrn_domains

        mail_reroute:
            driver = manualroute
            route_data = ${lookup{$local_part@$domain}lsearch{/etc/exim4/mail_reroute}}
            transport = remote_smtp

        hubbed_hosts:
            driver = manualroute
            domains = ! +local_domains
            route_data = ${lookup{$domain}lsearch{/etc/exim/hubbed_hosts}}
            transport = remote_smtp

%(extro)s

        userforward:
            driver = redirect
            domains = +local_domains
            file = /var/spool/mail/forward/${local_part}@${domain}
            no_verify
            no_expn
            check_ancestor
            file_transport = address_file
            pipe_transport = address_pipe
            reply_transport = address_reply

        user_vacation:
            driver = accept
            domains = +local_domains
            require_files = /var/spool/mail/vacation/${local_part}@${domain}.txt
            no_verify
            user = apache
            senders = !^.*-request@.* : !^owner-.*@.* : !^postmaster@.* : \\
                      ! ^listmaster@.* : !^mailer-daemon@.*
            transport = vacation_reply
            unseen

        ldap_aliases:
            driver = redirect
            domains = +local_domains
            allow_defer
            allow_fail
            data = ${lookup ldap {user="cn=Manager,o=%(ldapbase)s" pass=%(ldappass)s \\
                   ldap:///?mail?sub?(mailAlternateAddress=${local_part}@${domain})}}
            redirect_router = ldap_forward
            retry_use_local_part

        ldap_forward:
            driver = redirect
            domains = +local_domains
            allow_defer
            allow_fail
            data = ${lookup ldap {user="cn=Manager,o=%(ldapbase)s" pass=%(ldappass)s \\
                    ldap:///?mailForwardingAddress?sub?\\
                    (&(accountStatus=active)(mail=${local_part}@${domain}))}{$value}fail}
            no_expn
            retry_use_local_part
            no_verify

        ldap_user:
            driver = accept
            domains = +local_domains
            condition =   ${if eq {}{${lookup ldap {user="cn=Manager,o=%(ldapbase)s" pass=%(ldappass)s \\
                          ldap:///?mail?sub?(&(accountStatus=active)(mail=${local_part}@${domain}))}}}{no}{yes}}
            group = users
            retry_use_local_part
            transport = local_delivery

        catchall:
            domains = lsearch;/etc/exim/catchall_domains
            driver = redirect
            data = catchall@${domain}

        localuser:
            driver = accept
            domains = +local_domains
            check_local_user
            transport = local_delivery
        """ % {
            'router': mm_router,
            'ldapbase': config.LDAPBase,
            'ldappass': config.LDAPPassword,
            'extro': externalRouter,
        }

        ## Prevent bounce of failed hosts? (Maximum send timeout reached)
        hostfailBounce = ""
        if config.Mail.get('hostfailbounce', False):
            hostfailBounce = "  delay_after_cutoff = false\n"

        eximTransports = """
        ######################################################################
        #                      TRANSPORTS CONFIGURATION                      #
        ######################################################################

        begin transports

        bsmtp_for_etrn:
            driver=appendfile
            file=/var/spool/mail/etrn/$domain
            user=mail
            batch_max=1000
            use_bsmtp

        vacation_reply:
            debug_print = "T: vacation_reply for $local_part@$domain"
            driver = autoreply
            file = /var/spool/mail/vacation/${local_part}@${domain}.txt
            file_expand
            log = /var/spool/mail/vacation/${local_part}@${domain}.log
            once_repeat = 7d
            once = /var/spool/mail/vacation/${local_part}@${domain}.db
            from = postmaster@${domain}
            to = $sender_address
            subject = "Re: $h_subject"
            text = "\
            This is an automated response. $local_part@${domain} is \\n\\
            not presently in the office.:\\n\\
            ====================================================\\n\\n"

        remote_smtp:
            driver = smtp
            %s

        local_delivery:
            driver = appendfile
            create_directory
            delivery_date_add
            directory = ${lookup ldap {user="cn=Manager,o=%s" pass=%s \\
                        ldap:///?mailMessageStore?sub?(&(accountStatus=active)\\
                        (mail=${local_part}@${domain}))}}
            directory_mode = 770
            envelope_to_add
            group = mail
            maildir_format
            mode = 660
            return_path_add
            user = mail

        address_pipe:
            driver = pipe
            return_output

        address_file:
            driver = appendfile
            delivery_date_add
            envelope_to_add
            return_path_add

        address_reply:
            driver = autoreply

        %s\n""" % (hostfailBounce, config.LDAPBase, config.LDAPPassword, mm_transport)

        eximOther = """
        ######################################################################
        #                      RETRY CONFIGURATION                           #
        ######################################################################

        begin retry
        *                      *           F,2h,15m; G,16h,1h,1.5; F,7d,4h

        ######################################################################
        #                      REWRITE CONFIGURATION                         #
        ######################################################################

        begin rewrite

        ######################################################################
        #                   AUTHENTICATION CONFIGURATION                     #
        ######################################################################

        begin authenticators

        login:
            driver = plaintext
            public_name = LOGIN
            server_prompts = "Username:: : Password::"
            server_advertise_condition = yes
            server_condition = \\
                ${\\
                    lookup ldap { \\
                        user="${lookup ldapdn {user="cn=Manager,o=%s" pass=%s \\
                        ldap:///?dn?sub?(&(accountStatus=active)(mail=${quote_ldap:$1}))}}" \\
                        pass="$2" \\
                        ldap:///?mail?sub?(&(accountStatus=active)(mail=${quote_ldap:$1})) \\
                    }{yes}fail \\
                }
            server_set_id = $1
        plain:
            driver = plaintext
            public_name = PLAIN
            server_prompts = :
            server_advertise_condition = yes
            server_condition = \\
                ${\\
                    lookup ldap { \\
                        user="${lookup ldapdn {user="cn=Manager,o=%s" pass=%s \\
                        ldap:///?dn?sub?(&(accountStatus=active)(mail=${quote_ldap:$2}))}}" \\
                        pass="$3" \\
                        ldap:///?mail?sub?(&(accountStatus=active)(mail=${quote_ldap:$2})) \\
                    }{yes}fail \\
                }
            server_set_id = $2 
        """ % ( 
            config.LDAPBase,
            config.LDAPPassword,
            config.LDAPBase,
            config.LDAPPassword,
        )

        confFile = eximMain + eximACL + eximRouters + eximTransports + eximOther
        os.system('mkdir -p /var/spool/mail/forward/')
        os.system('mkdir -p /var/spool/mail/etrn/')

        # Reprocess the config file
        lp = confFile.split('\n')
        confFile = ""
        for i in lp:
            confFile += i[8:] + '\n'

        if debianPath:
            confFile = confFile.replace('/etc/exim/', '/etc/exim4/').replace('apache', 'www-data')
            # Patches user names
            confFile = confFile.replace('user=mail', 'user=Debian-exim')
            Utils.writeConf('/etc/exim4/exim4.conf', confFile, '#')
            os.system('chmod a+r /etc/exim4/*')
            os.system('chmod a+x /etc/exim4/etrn_script >/dev/null 2>&1')
            os.system('chown Debian-exim:Debian-exim /var/spool/mail/etrn')
        else:   
            # Perform the opposite essentialy..
            confFile = confFile.replace('/etc/exim4/', '/etc/exim/').replace('www-data', 'apache')
            confFile = confFile.replace('user=Debian-exim', 'user=mail')
            Utils.writeConf('/etc/exim/exim.conf', confFile, '#')

        ### Mailname
        mailname = "%s.%s\n" % ( config.Hostname, config.Domain )
        l = open('/etc/mailname', 'wt')
        l.write(mailname)
        l.close()

